<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.3">Jekyll</generator><link href="http://dbain.wales/feed.xml" rel="self" type="application/atom+xml" /><link href="http://dbain.wales/" rel="alternate" type="text/html" /><updated>2018-04-07T12:57:00+01:00</updated><id>http://dbain.wales/</id><title type="html">DBA in Wales</title><subtitle>I am a DBA in Wales who likes to code with C# and PowerShell,  play music with Ruby, speak obscure languages  and discover places most people don't ever go to.</subtitle><entry><title type="html">DBA blogging with jekyll on GitHub Pages</title><link href="http://dbain.wales/about/jekyll-on-GitHub-Pages" rel="alternate" type="text/html" title="DBA blogging with jekyll on GitHub Pages" /><published>2018-04-07T07:00:00+01:00</published><updated>2018-04-07T07:00:00+01:00</updated><id>http://dbain.wales/about/jekyll-how-to</id><content type="html" xml:base="http://dbain.wales/about/jekyll-on-GitHub-Pages">&lt;h3 id=&quot;i-decided-to-start-blogging-again&quot;&gt;I decided to start blogging again&lt;/h3&gt;

&lt;p&gt;I had few prerequisits:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;the code examples in the posts should look well with syntax highlighting&lt;/li&gt;
  &lt;li&gt;the writing, including examples should be easy, preferably in markdown&lt;/li&gt;
  &lt;li&gt;the content shoulb be mine to take and share easily&lt;/li&gt;
  &lt;li&gt;it should be possible to easily work on content over a period of time, from multiple devices&lt;/li&gt;
  &lt;li&gt;it should be possible to see some trafic data as after all we all have our egos that need to be fed&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After reviewing a number of more obvious (at the time) options I have decided to use &lt;a href=&quot;https://jekyllrb.com&quot;&gt;jekyll&lt;/a&gt;, manage the content in a public &lt;a href=&quot;https://github.com&quot;&gt;GitHub&lt;/a&gt; repo and host the blog on &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt;. This post not meant to explain what those tools are, or why I made this decision. It is simply a set of instructions, mostly for myself, how to use jekyll to write and deploy blog posts hosted on GitHub Pages. If you find it helpful too, good for you.&lt;/p&gt;

&lt;p&gt;GitHub Pages support jekyll, in many cases all one needs to do is follow &lt;a href=&quot;https://jekyllrb.com/docs/github-pages/&quot;&gt;the instructions&lt;/a&gt; and enjoy the results. I created the respotiory, gh-pages branch, generated an empty jekyll site, committed, pushed and there it was, my new website satisfying most of my requirements. Then trying to get a custom plugin (&lt;a href=&quot;https://github.com/hendrikschneider/jekyll-analytics&quot;&gt;jekyll-analytics&lt;/a&gt; for the ego requirement) to work took me much longer than I expected, almost to the point when I started to question my choice. Locally everything would work just as expected, but after pushing to github, the page would update, but the plugin was not available.&lt;/p&gt;

&lt;p&gt;My problem was caused by a little advertised feature: &lt;em&gt;GitHub Pages supports jekyll&lt;/em&gt;, and the plugins, &lt;em&gt;but only&lt;/em&gt; plugins which have been &lt;em&gt;whitelisted&lt;/em&gt; in the &lt;a href=&quot;https://github.com/github/pages-gem&quot;&gt;pages-gem&lt;/a&gt;. The same applies to themes it appears. The full list can be found in the source code &lt;a href=&quot;https://github.com/github/pages-gem/blob/master/lib/github-pages/plugins.rb&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here are the steps to work around this limitation:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;create &lt;code class=&quot;highlighter-rouge&quot;&gt;/docs&lt;/code&gt; folder in your repository&lt;/li&gt;
  &lt;li&gt;add &lt;code class=&quot;highlighter-rouge&quot;&gt;destination: docs/&lt;/code&gt; to the &lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;change GitHub Pages configuration of your repository to serve pages from the &lt;code class=&quot;highlighter-rouge&quot;&gt;/docs&lt;/code&gt; folder&lt;/li&gt;
  &lt;li&gt;when ready to publish new version of the blog, build it locally&lt;/li&gt;
  &lt;li&gt;commit and push to master branch&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;working-with-the-existing-blog&quot;&gt;working with the existing blog&lt;/h2&gt;

&lt;p&gt;Since we are working with github I assume Git Bash is installed, and that is what I use in the next steps&lt;/p&gt;

&lt;h3 id=&quot;setting-up-a-new-workstation&quot;&gt;setting up a new workstation&lt;/h3&gt;

&lt;p&gt;A good place to start is &lt;a href=&quot;https://jekyllrb.com/docs/installation/#requirements&quot;&gt;here&lt;/a&gt;. Below are the steps I take.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;install &lt;a href=&quot;https://rubyinstaller.org/downloads/&quot;&gt;Ruby&lt;/a&gt;.
    &lt;ul&gt;
      &lt;li&gt;MSYS2 base&lt;/li&gt;
      &lt;li&gt;MSYS2 system update&lt;/li&gt;
      &lt;li&gt;MSYS and MINGW development toolchain&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;check versions - (versions at the time of writing)
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gcc --version&lt;/code&gt; (5.2.0)&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ruby -v&lt;/code&gt; (2.5.1)&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gem -v&lt;/code&gt; (2.7.6)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;install the Bundler gem &lt;code class=&quot;highlighter-rouge&quot;&gt;gem install bundler&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;install jekyll &lt;code class=&quot;highlighter-rouge&quot;&gt;gem install jekyll&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;restart the git bash&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;working-with-an-existing-blog&quot;&gt;working with an existing blog&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;go to the folder containing the blog&lt;/li&gt;
  &lt;li&gt;pull the latest version &lt;code class=&quot;highlighter-rouge&quot;&gt;git pull&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;install the plugins &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle install&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;start local version &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle exec jekyll serve --watch&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Edit the files as needed, check the changes through a web browser on &lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:4000&lt;/code&gt;. jekyll observes the changes in the files and regenerates the site automatically&lt;/p&gt;

&lt;h3 id=&quot;when-finished&quot;&gt;when finished&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;make sure all old files are removed &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle exec jekyll clean&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;build the production version of the blog &lt;code class=&quot;highlighter-rouge&quot;&gt;JEKYLL_ENV=production bundle exec jekyll build&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><summary type="html">I decided to start blogging again</summary></entry><entry><title type="html">TDD with VS Code and Pester</title><link href="http://dbain.wales/about/tdd-with-vscode-and-pester" rel="alternate" type="text/html" title="TDD with VS Code and Pester" /><published>2018-03-31T16:00:00+01:00</published><updated>2018-03-31T16:00:00+01:00</updated><id>http://dbain.wales/about/tdd-with-vscode-and-pester</id><content type="html" xml:base="http://dbain.wales/about/tdd-with-vscode-and-pester">&lt;p&gt;I have recently switched to &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;Visual Studio Code&lt;/a&gt; for writing &lt;a href=&quot;https://docs.microsoft.com/en-us/powershell/&quot;&gt;PowerShell&lt;/a&gt; scripts. (&lt;a href=&quot;https://blogs.technet.microsoft.com/heyscriptingguy/2016/12/05/get-started-with-powershell-development-in-visual-studio-code/&quot;&gt;Here is why and how&lt;/a&gt;). At the same time I started using &lt;a href=&quot;https://github.com/pester/Pester&quot;&gt;Pester&lt;/a&gt; to do TDD with PowerShell too. It works very well out of the box, at least at the beginning of a project. As you are writing your Pester tests file to cover the function you have just written you can simply hit F5 to execute all of the tests in that file. Easy.&lt;/p&gt;

&lt;p&gt;Itâ€™s just that it is backwards. The tests should have already been written, and as you are writing your function that will satisfy the tests you try to press F5 and that function gets executed, not the tests. Even more so, if the function is part a module it gets executed out of context. Nothing works.&lt;/p&gt;

&lt;p&gt;Trying to solve my problem I found a very good writeup on &lt;a href=&quot;https://blogs.technet.microsoft.com/heyscriptingguy/2017/02/06/debugging-powershell-script-in-visual-studio-code-part-1/&quot;&gt;Debugging PowerShell in VS Code&lt;/a&gt; but it did not answer my question of how to do test driven development with pester and Visual Studio Code.&lt;/p&gt;

&lt;p&gt;Eventually to solve my problem I have created &lt;a href=&quot;https://gist.github.com/michalporeba/5103a2fae1b1dfa3c1f09b9f4d225420&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;workinprogress.ps1&lt;/code&gt;&lt;/a&gt; script which I typically keep just outside of the repository and define the following VS Code configuration in my &lt;code class=&quot;highlighter-rouge&quot;&gt;launch.json&lt;/code&gt; file.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;version&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;0.2.0&quot;&lt;/span&gt;,
    &lt;span class=&quot;s2&quot;&gt;&quot;configurations&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;

        &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;PowerShell&quot;&lt;/span&gt;,
            &lt;span class=&quot;s2&quot;&gt;&quot;request&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;launch&quot;&lt;/span&gt;,
            &lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;Test workinprogress&quot;&lt;/span&gt;,
            &lt;span class=&quot;s2&quot;&gt;&quot;script&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;workspaceFolder&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/../workinprogress.ps1&quot;&lt;/span&gt;,
            &lt;span class=&quot;s2&quot;&gt;&quot;args&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;workspaceFolder&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;workspaceFolder&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/tests&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;VS Code will pass the current workspace, the path to the unit tests (&lt;code class=&quot;highlighter-rouge&quot;&gt;${workspaceFolder}/tests&lt;/code&gt; in the example), and the open file with the current line number. Based on that information the following will happen when you hit F5&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;if there is a module (.psm1) file in the workspace, the module will be reloaded&lt;/li&gt;
  &lt;li&gt;if the open file name ends with &lt;code class=&quot;highlighter-rouge&quot;&gt;.Tests.ps1&lt;/code&gt; the script will attempt to find the closest pester &lt;code class=&quot;highlighter-rouge&quot;&gt;-Tag&lt;/code&gt; and execute only that tag from the current file. Failing that the whole pester file will be executed&lt;/li&gt;
  &lt;li&gt;if it is not a pester file but the matching (by name) test file exists next to the open file, it will be executed.&lt;/li&gt;
  &lt;li&gt;if there is a matching (by name) test file somewhere inside the tests folder (&lt;code class=&quot;highlighter-rouge&quot;&gt;${workspaceFoder}/tests&lt;/code&gt; in this example) it will be executed.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A matching test file has the same name as the original file but ends with &lt;code class=&quot;highlighter-rouge&quot;&gt;.Tests.ps1&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;.ps1&lt;/code&gt;. So for a command file &lt;code class=&quot;highlighter-rouge&quot;&gt;Get-MyValue.ps1&lt;/code&gt; the matching tests file is &lt;code class=&quot;highlighter-rouge&quot;&gt;Get-MyValue.Tests.ps1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;workinprogress.ps1&lt;/code&gt; file is available on github &lt;a href=&quot;https://gist.github.com/michalporeba/5103a2fae1b1dfa3c1f09b9f4d225420&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">I have recently switched to Visual Studio Code for writing PowerShell scripts. (Here is why and how). At the same time I started using Pester to do TDD with PowerShell too. It works very well out of the box, at least at the beginning of a project. As you are writing your Pester tests file to cover the function you have just written you can simply hit F5 to execute all of the tests in that file. Easy.</summary></entry></feed>