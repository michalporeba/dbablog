<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-05-29T22:34:10+01:00</updated><id>http://localhost:4000/</id><title type="html">DBA in Wales</title><subtitle>I am a DBA in Wales who likes to code with C# and PowerShell,  play music with Ruby, speak obscure languages  and discover places most people don't ever go to.</subtitle><entry><title type="html">DB Stuck in SINGLE USER Mode</title><link href="http://localhost:4000/about/db-stuck-single-user-mode" rel="alternate" type="text/html" title="DB Stuck in SINGLE USER Mode" /><published>2018-05-29T20:00:00+01:00</published><updated>2018-05-29T20:00:00+01:00</updated><id>http://localhost:4000/about/db-stuck-in-single-user-mode</id><content type="html" xml:base="http://localhost:4000/about/db-stuck-single-user-mode">&lt;h3 id=&quot;some-background&quot;&gt;Some Background&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;TLDR? Solution is at the bottom of this page.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The internet is full of examples how to close all active connections to a database by doing something like&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;master&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;alter&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;database&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;somedb&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;single_user&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rollback&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;immediate&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;alter&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;database&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;somedb&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;multi_user&lt;/span&gt; 
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When you try it on your development machine it works just fine, when you do it in QA it is typically OK too, but one day you realise that you have made a mistake, that the &lt;code class=&quot;highlighter-rouge&quot;&gt;use master&lt;/code&gt; should have been &lt;code class=&quot;highlighter-rouge&quot;&gt;use somedb&lt;/code&gt; and now you have a production database in a single user mode, there is only one connection allowed at the time and yours is not the one. Worse, there are hundreds of clients, all queueing to be the only user!&lt;/p&gt;

&lt;p&gt;You cannot connect to the database&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;Msg 924, Level 14, State 1, Line 1
Database 'somedb' is already open and can only have one user at a time. 
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Trying to do anything that starts with &lt;code class=&quot;highlighter-rouge&quot;&gt;alter database ...&lt;/code&gt; will fail too&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;Msg 5064, Level 16, State 1, Line 1
Changes to the state or options of database 'somedb' cannot be made at this time. The database is in single-user mode, and a user is currently connected to it. 
Msg 5069, Level 16, State 1, Line 1
ALTER DATABASE statement failed. 
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Trying to get some ‘authority’ over the server by connecting as the admin (DAC) is of no use either.&lt;/p&gt;

&lt;p&gt;So what can be done? If you happen to have one sql login per database (or a handful) then you can revoke that logins permission to log in, but then you have to make sure you grant it back, to all of the ones you revoked it from. It would work but typically either there are too many logins that would have to have rights revoked or there are too few logins and revoking any rights would make the outage wider than it already is.&lt;/p&gt;

&lt;p&gt;A fairly obvious solution is to shut down the server and bring it back up in the single user mode. The &lt;code class=&quot;highlighter-rouge&quot;&gt;Sqlservr.exe -m &lt;/code&gt; option. Then only one admin user will be allowed to connect to the instance, which will allow you to change the permissions of the affected database. The only problem is, that we were talking about a problem which affects almost exclusively busy production server. Shutting it down to fix just one database sounds like an overkill and I bet there will be a lot of explaining to do afterwards.&lt;/p&gt;

&lt;h3 id=&quot;solution&quot;&gt;Solution&lt;/h3&gt;

&lt;p&gt;What I found to work quite well is to open two sessions. In the first one I execute a query that will constantly attempt to connect to the database which is stuck in the single suer mode&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;somedb&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That ensures that I’ve got a session that constantly is trying to connect. Then in the other session I will look up the SPID of the session currently connected and kill it. Obviously that assumes that I know my system, and I know that the application will recover if I kill the session.&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spid&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sysprocesses&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'somedb'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;kill&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Do it a couple of times making sure you don’t kill the spid of the first session and your first session should be connected to the database. Now all that is left is to finally do&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;alter&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;database&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;somedb&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;multi_user&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">Some Background TLDR? Solution is at the bottom of this page.</summary></entry><entry><title type="html">Automated Environmental Checks</title><link href="http://localhost:4000/about/environmental-checks" rel="alternate" type="text/html" title="Automated Environmental Checks" /><published>2018-04-09T22:42:22+01:00</published><updated>2018-04-09T22:42:22+01:00</updated><id>http://localhost:4000/about/automated-environmental-checks</id><content type="html" xml:base="http://localhost:4000/about/environmental-checks">&lt;h3 id=&quot;unit-test-your-environments&quot;&gt;Unit Test Your Environments&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Infrastructure_as_Code&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Infrastructure as Code&lt;/code&gt;&lt;/a&gt; has been around for quite some time now. There are many clever definitions one can easily find, but for me it is simply an extension of good coding (or perhaps DevOpsing) principals. You don’t go into production systems and keep making changes until it works. You write your code, you check it into your favourite repository, then there is some process that will automatically test it, and eventually it will make its way to production environment. That way if you make a mistake, you can see where you made it and if it happens to work just fine, you can easily do it again, and again, and again as you scale out.&lt;/p&gt;

&lt;p&gt;It’s all &lt;del&gt;very&lt;/del&gt; easy when you work with ‘cloud’ virtual environments that wait to ingest next config file and reconfigure themselves automatically. But what if you look after a more traditional setup? Exchange, Share Point, SQL Server clusters hosted on premises on Windows Servers, rather than Docker pods? What if you are not the only admin and people do go in there and make changes to live systems’ configuration, perhaps even for good reasons?&lt;/p&gt;

&lt;p&gt;I’d say you do the same as any decent software developer would do when asked to take care of an old, perhaps unfashionable, non-microservice code base: When asked to change anything, start with writing unit tests so you know at the very least you will not make it any worse. That’s right, even if you cannot define your configuration with code, you can test it with it. PowerShell and &lt;a href=&quot;https://github.com/pester/Pester&quot;&gt;Pester&lt;/a&gt; are great tools to do so. And if you happen to be responsible for SQL Servers, then there are unit tests already written for you, available as the &lt;a href=&quot;https://dbachecks.io&quot;&gt;dbachecks&lt;/a&gt; module. It’s MIT licensed. Go, install it and use it.&lt;/p&gt;

&lt;h3 id=&quot;powershell-and-pester&quot;&gt;PowerShell and Pester&lt;/h3&gt;

&lt;p&gt;Pester is an open source test and mock framework for PowerShell. All modern Windows servers have PowerShell, so let’s use it. &lt;a href=&quot;http://jakubjares.com&quot;&gt;Jakub Jareš&lt;/a&gt; one of the contributors to the Pester project has written an &lt;a href=&quot;http://jakubjares.com/2017/12/07/testing-your-environment-tests/&quot;&gt;excellent blog post&lt;/a&gt; about environmental checks, how to write them in Pester and why you should test you &lt;del&gt;tests&lt;/del&gt; checks. That was my starting point when I took it on myself to improve dbachecks. If you haven’t yet, go and read it. I will try not to repeat what Jakub wrote there, but rather where I got from there while trying to find a way to structure checks in such a way, that they are both testable, and easily understood by non-developer sysadmins.&lt;/p&gt;

&lt;h3 id=&quot;the-difference&quot;&gt;The Difference&lt;/h3&gt;

&lt;p&gt;Unit tests typically follow the AAA pattern.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Arrange&lt;/strong&gt; your context&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Act&lt;/strong&gt; (as in perform the action you want to test), and finally&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Assert&lt;/strong&gt; that the outcome matches your expectations&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In unit testing the objective is to test the functionality detached (as much as practical) from the outside environment. Obviously, that’s something that cannot be done when doing environmental checks. After all, the environments is what we are testing, so the AAA becomes CCC&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Configure&lt;/strong&gt; your context, get the configuration for the environment you are validating&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Collect&lt;/strong&gt; the data about your environment&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Confirm&lt;/strong&gt; the real life matches your expectations&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Describing it like that stopped me going in circles thinking how do I test my tests. Now I’m testing my checks and to do that I follow the AAA pattern.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;I &lt;em&gt;arrange&lt;/em&gt; my test by mocking my &lt;em&gt;configure&lt;/em&gt; and &lt;em&gt;collect&lt;/em&gt; functions&lt;/li&gt;
  &lt;li&gt;I &lt;em&gt;act&lt;/em&gt; by calling the &lt;em&gt;confirm&lt;/em&gt; function passing it the mocked details&lt;/li&gt;
  &lt;li&gt;I &lt;em&gt;assert&lt;/em&gt; the outcome by checking if the &lt;em&gt;confirm&lt;/em&gt; action behaved as expected&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ideally that would be it, write a Pester unit test and then a test for that unit test. In practice it is slightly more complex as we have to work with the limitations of PowerShell and Pester (which after all is primarly for unit test not environmental checks)&lt;/p&gt;

&lt;h3 id=&quot;code-examples&quot;&gt;Code Examples&lt;/h3&gt;

&lt;p&gt;Typically, my testable check has 4 components in 3 files. Here is an example from the dbachecks’ Page Verify check.&lt;/p&gt;

&lt;p&gt;First, we need to write the confirm function and its configuration 
&lt;strong&gt;confirms\Database.PageVerify.ps1&lt;/strong&gt; which could be as simple as:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;Confirm-PageVerify &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;param&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;parameter&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Mandatory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$true&lt;/span&gt;,ValueFromPipeline&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)]&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]]&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$TestObject&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;process&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$TestObject&lt;/span&gt;.PageVerify | Should -Be &lt;span class=&quot;s2&quot;&gt;&quot;CHECKSUM&quot;&lt;/span&gt; -Because &lt;span class=&quot;s2&quot;&gt;&quot;we expect Page Verify to be CHECKSUM&quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;But to be able to test configuration input and to make the Confirm function fit better with the rest of the framework we do&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;Get-ConfigForPageVerifyCheck &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$pageverifyValidValues&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; @&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;NONE&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;TORN_PAGE_DETECTION&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;CHECKSUM&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$pageverify&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Get-DbcConfigValue policy.pageverify
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$pageverify&lt;/span&gt; -in &lt;span class=&quot;nv&quot;&gt;$pageverifyValidValues&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;The policy.pageverify is set to &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$pageverify&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;. Valid values are (&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$pageverifyValidValues&lt;/span&gt;.Join&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;, &quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;))&quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; @&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        PageVerify &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Get-DbcConfigValue policy.pageverify&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;Confirm-PageVerify &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;param&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;parameter&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Mandatory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$true&lt;/span&gt;,ValueFromPipeline&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)]&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]]&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$TestObject&lt;/span&gt;, 
        &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;parameter&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Mandatory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)][&lt;/span&gt;Alias&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;With&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)]&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$TestSettings&lt;/span&gt;,
        &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$Because&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;process&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$TestObject&lt;/span&gt;.PageVerify | Should -Be &lt;span class=&quot;nv&quot;&gt;$TestSettings&lt;/span&gt;.PageVerify -Because &lt;span class=&quot;nv&quot;&gt;$Because&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and to make sure it works as expected, we create unit tests for it 
&lt;strong&gt;tests\checks\Database.PageVerify.Tests.ps1&lt;/strong&gt; like so&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;Describe &lt;span class=&quot;s2&quot;&gt;&quot;Testing Page Verify Confirms&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    Context &lt;span class=&quot;s2&quot;&gt;&quot;Test configuration&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$cases&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; @&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
            @&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; Option &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;CHECKSUM&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
            @&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; Option &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;TORN_PAGE_DETECTION&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
            @&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; Option &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;NONE&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

        It &lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;Option&amp;gt; is acceptable as policy.pageverify value&quot;&lt;/span&gt; -TestCases &lt;span class=&quot;nv&quot;&gt;$cases&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
            Mock Get-DbcConfigValue &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$Option&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; -ParameterFilter &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$Name&lt;/span&gt; -like &lt;span class=&quot;s2&quot;&gt;&quot;policy.pageverify&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Get-ConfigForPageVerifyCheck&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.PageVerify | Should -Be &lt;span class=&quot;nv&quot;&gt;$Option&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        
        It &lt;span class=&quot;s2&quot;&gt;&quot;Throw exception when policy.pageverify is set to unsupported option&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            Mock Get-DbcConfigValue &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;NOT_SUPPORTED_OPTION&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; -ParameterFilter &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$Name&lt;/span&gt; -like &lt;span class=&quot;s2&quot;&gt;&quot;policy.pageverify&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; Get-ConfigForPageVerifyCheck &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; | Should -Throw 
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    Context &lt;span class=&quot;s2&quot;&gt;&quot;Test the confirm function&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        Mock Get-DbcConfigValue &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;CHECKSUM&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; -ParameterFilter &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$Name&lt;/span&gt; -like &lt;span class=&quot;s2&quot;&gt;&quot;policy.pageverify&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;nv&quot;&gt;$testConfig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Get-ConfigForPageVerifyCheck 

        It &lt;span class=&quot;s2&quot;&gt;&quot;The test should pass when the PageVerify is as configured&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            @&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                PageVerify &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;CHECKSUM&quot;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; | 
                Confirm-PageVerify -With &lt;span class=&quot;nv&quot;&gt;$testConfig&lt;/span&gt; 
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        It &lt;span class=&quot;s2&quot;&gt;&quot;The test should fail when the PageVerify is not as configured&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                @&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    PageVerify &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;NONE&quot;&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; | 
                    Confirm-PageVerify -With &lt;span class=&quot;nv&quot;&gt;$testConfig&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; | Should -Throw 
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And finally, when we know the configuration and confirm functions are working as expected, the &lt;strong&gt;checks\Database.Tests.ps1&lt;/strong&gt; which provides the definition of the check could be as simple as:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nv&quot;&gt;$config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Get-ConfigForPageVerifyCheck                  &lt;span class=&quot;c1&quot;&gt;# Configure&lt;/span&gt;
@&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Get-Instance&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.ForEach&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;                                &lt;span class=&quot;c1&quot;&gt;# Collect on instance level&lt;/span&gt;
    @&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Get-DatabaseInfo -SqlInstance &lt;span class=&quot;nv&quot;&gt;$psitem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.ForEach&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# Collect on database level&lt;/span&gt;
        It &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$psitem&lt;/span&gt;.Database&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; should have page verify set to &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$config&lt;/span&gt;.PageVerify&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;# Confirm environmental details (in $psitem)&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;$psitem&lt;/span&gt; | Confirm-PageVerify -With &lt;span class=&quot;nv&quot;&gt;$config&lt;/span&gt; -Because &lt;span class=&quot;s2&quot;&gt;&quot;Page verify helps SQL Server to detect corruption&quot;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;But to make it display better, and to provide more information to the curious sysadmin who would like to know what the check does we do this instead:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;Describe &lt;span class=&quot;s2&quot;&gt;&quot;Page Verify Settings Check&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Get-SettingsForPageVerifyCheck                    &lt;span class=&quot;c1&quot;&gt;# Configure&lt;/span&gt;
    @&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Get-Instance&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.ForEach&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;                                    &lt;span class=&quot;c1&quot;&gt;# Collect on instance level&lt;/span&gt;
        Context &lt;span class=&quot;s2&quot;&gt;&quot;Testing page verify setting on &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$psitem&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;          
            @&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Get-DatabaseInfo -SqlInstance &lt;span class=&quot;nv&quot;&gt;$psitem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.ForEach&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# Collect on database level&lt;/span&gt;
                It &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$psitem&lt;/span&gt;.Database&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; should have page verify set to &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$config&lt;/span&gt;.PageVerify&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;c1&quot;&gt;# Confirm environmental details (in $psitem)&lt;/span&gt;
                    &lt;span class=&quot;nv&quot;&gt;$psitem&lt;/span&gt; | Confirm-PageVerify -With &lt;span class=&quot;nv&quot;&gt;$config&lt;/span&gt; -Because &lt;span class=&quot;s2&quot;&gt;&quot;Page verify helps SQL Server to detect corruption&quot;&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If somebody is simply curious what the check checks, and why, all he has to do is to read the strings here or in the Pester output&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;“Page Verify Settings Check”&lt;/li&gt;
  &lt;li&gt;“Testing page verify setting on &lt;your instance=&quot;&quot; here=&quot;&quot;&gt;&quot;&lt;/your&gt;&lt;/li&gt;
  &lt;li&gt;“Each &lt;Database&gt; should have page verify set to &lt;Expected Value=&quot;&quot;&gt;&quot;&lt;/Expected&gt;&lt;/Database&gt;&lt;/li&gt;
  &lt;li&gt;“Because page verify helps SQL Server to detect corruption”&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-small-print&quot;&gt;The Small Print&lt;/h3&gt;

&lt;p&gt;To make sure the checks are easy to read and have as high as practical test coverage I came up with a number of guidelines&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Try to unit test your checks. But it is better to have a manually tested check than don’t have one at all.&lt;/li&gt;
  &lt;li&gt;Prioritise readability in the checks’ file. Assume that is the file for non-developer to read.&lt;/li&gt;
  &lt;li&gt;Confirm-* functions should have -Because parameter which value is defined in the checks file, rather than have -Because in the Confirm-* function directly. That improves readability.&lt;/li&gt;
  &lt;li&gt;While Pester’s test cases might be useful for unit testing our checks, they should be avoided in the checks themselves. The code is less complex to read to an untrained eye.&lt;/li&gt;
  &lt;li&gt;The checks’ file should have as little logic as possible. The collection of data has to happen here, and it will include typically some looping and parameter passing. That is unavoidable, but try to avoid what you can, definitely the conditional bits like &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;else&lt;/code&gt; should not be there. Put them in the &lt;code class=&quot;highlighter-rouge&quot;&gt;Confirm-*&lt;/code&gt; function and validate it with unit tests.&lt;/li&gt;
  &lt;li&gt;If the test is not applicable for a resource in a certain condition, it is better to get that resource and skip that test from inside the Confirm-* function. That way we know nothing is missed, and the skipping logic can be unit tested as well. OK, that would be the ideal solution, but unfortunately it is currently impossible in Pester, so instead you can mark the test as inconclusive using Set-TestInconclusive. (Check the &lt;a href=&quot;https://github.com/pester/Pester/issues/1022&quot;&gt;GitHub issue&lt;/a&gt; I raised about that extra functionality).&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h3&gt;

&lt;p&gt;Go and write some environmental checks for your servers!
If you work with SQL Servers, get &lt;a href=&quot;https://dbachecks.io&quot;&gt;dbachecks&lt;/a&gt; and try them out.&lt;/p&gt;</content><author><name></name></author><summary type="html">Unit Test Your Environments</summary></entry><entry><title type="html">DBA blogging with jekyll on GitHub Pages</title><link href="http://localhost:4000/about/jekyll-on-GitHub-Pages" rel="alternate" type="text/html" title="DBA blogging with jekyll on GitHub Pages" /><published>2018-04-07T07:00:00+01:00</published><updated>2018-04-07T07:00:00+01:00</updated><id>http://localhost:4000/about/jekyll-how-to</id><content type="html" xml:base="http://localhost:4000/about/jekyll-on-GitHub-Pages">&lt;h3 id=&quot;i-decided-to-start-blogging-again&quot;&gt;I decided to start blogging again&lt;/h3&gt;

&lt;p&gt;I had few prerequisits:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;the code examples in the posts should look well with syntax highlighting&lt;/li&gt;
  &lt;li&gt;the writing, including examples should be easy, preferably in markdown&lt;/li&gt;
  &lt;li&gt;the content shoulb be mine to take and share easily&lt;/li&gt;
  &lt;li&gt;it should be possible to easily work on content over a period of time, from multiple devices&lt;/li&gt;
  &lt;li&gt;it should be possible to see some trafic data as after all we all have our egos that need to be fed&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After reviewing a number of more obvious (at the time) options I have decided to use &lt;a href=&quot;https://jekyllrb.com&quot;&gt;jekyll&lt;/a&gt;, manage the content in a public &lt;a href=&quot;https://github.com&quot;&gt;GitHub&lt;/a&gt; repo and host the blog on &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt;. This post not meant to explain what those tools are, or why I made this decision. It is simply a set of instructions, mostly for myself, how to use jekyll to write and deploy blog posts hosted on GitHub Pages. If you find it helpful too, good for you.&lt;/p&gt;

&lt;p&gt;GitHub Pages support jekyll, in many cases all one needs to do is follow &lt;a href=&quot;https://jekyllrb.com/docs/github-pages/&quot;&gt;the instructions&lt;/a&gt; and enjoy the results. I created the respotiory, gh-pages branch, generated an empty jekyll site, committed, pushed and there it was, my new website satisfying most of my requirements. Then trying to get a custom plugin (&lt;a href=&quot;https://github.com/hendrikschneider/jekyll-analytics&quot;&gt;jekyll-analytics&lt;/a&gt; for the ego requirement) to work took me much longer than I expected, almost to the point when I started to question my choice. Locally everything would work just as expected, but after pushing to github, the page would update, but the plugin was not available.&lt;/p&gt;

&lt;p&gt;My problem was caused by a little advertised feature: &lt;em&gt;GitHub Pages supports jekyll&lt;/em&gt;, and the plugins, &lt;em&gt;but only&lt;/em&gt; plugins which have been &lt;em&gt;whitelisted&lt;/em&gt; in the &lt;a href=&quot;https://github.com/github/pages-gem&quot;&gt;pages-gem&lt;/a&gt;. The same applies to themes it appears. The full list can be found in the source code &lt;a href=&quot;https://github.com/github/pages-gem/blob/master/lib/github-pages/plugins.rb&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here are the steps to work around this limitation:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;create &lt;code class=&quot;highlighter-rouge&quot;&gt;/docs&lt;/code&gt; folder in your repository&lt;/li&gt;
  &lt;li&gt;add &lt;code class=&quot;highlighter-rouge&quot;&gt;destination: docs/&lt;/code&gt; to the &lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;change GitHub Pages configuration of your repository to serve pages from the &lt;code class=&quot;highlighter-rouge&quot;&gt;/docs&lt;/code&gt; folder&lt;/li&gt;
  &lt;li&gt;when ready to publish new version of the blog, build it locally&lt;/li&gt;
  &lt;li&gt;commit and push to master branch&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;working-with-the-existing-blog&quot;&gt;working with the existing blog&lt;/h2&gt;

&lt;p&gt;Since we are working with github I assume Git Bash is installed, and that is what I use in the next steps&lt;/p&gt;

&lt;h3 id=&quot;setting-up-a-new-workstation&quot;&gt;setting up a new workstation&lt;/h3&gt;

&lt;p&gt;A good place to start is &lt;a href=&quot;https://jekyllrb.com/docs/installation/#requirements&quot;&gt;here&lt;/a&gt;. Below are the steps I take.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;install &lt;a href=&quot;https://rubyinstaller.org/downloads/&quot;&gt;Ruby&lt;/a&gt;.
    &lt;ul&gt;
      &lt;li&gt;MSYS2 base&lt;/li&gt;
      &lt;li&gt;MSYS2 system update&lt;/li&gt;
      &lt;li&gt;MSYS and MINGW development toolchain&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;check versions - (versions at the time of writing)
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gcc --version&lt;/code&gt; (5.2.0)&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ruby -v&lt;/code&gt; (2.5.1)&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gem -v&lt;/code&gt; (2.7.6)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;install the Bundler gem &lt;code class=&quot;highlighter-rouge&quot;&gt;gem install bundler&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;install jekyll &lt;code class=&quot;highlighter-rouge&quot;&gt;gem install jekyll&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;restart the git bash&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;working-with-an-existing-blog&quot;&gt;working with an existing blog&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;go to the folder containing the blog&lt;/li&gt;
  &lt;li&gt;pull the latest version &lt;code class=&quot;highlighter-rouge&quot;&gt;git pull&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;install the plugins &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle install&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;start local version &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle exec jekyll serve --watch&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Edit the files as needed, check the changes through a web browser on &lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:4000&lt;/code&gt;. jekyll observes the changes in the files and regenerates the site automatically&lt;/p&gt;

&lt;h3 id=&quot;when-finished&quot;&gt;when finished&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;make sure all old files are removed &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle exec jekyll clean&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;build the production version of the blog &lt;code class=&quot;highlighter-rouge&quot;&gt;JEKYLL_ENV=production bundle exec jekyll build&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;stage, commit and push&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><summary type="html">I decided to start blogging again</summary></entry><entry><title type="html">TDD with VS Code and Pester</title><link href="http://localhost:4000/about/vscode-and-pester" rel="alternate" type="text/html" title="TDD with VS Code and Pester" /><published>2018-03-31T16:00:00+01:00</published><updated>2018-03-31T16:00:00+01:00</updated><id>http://localhost:4000/about/tdd-with-vscode-and-pester</id><content type="html" xml:base="http://localhost:4000/about/vscode-and-pester">&lt;p&gt;I have recently switched to &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;Visual Studio Code&lt;/a&gt; for writing &lt;a href=&quot;https://docs.microsoft.com/en-us/powershell/&quot;&gt;PowerShell&lt;/a&gt; scripts. (&lt;a href=&quot;https://blogs.technet.microsoft.com/heyscriptingguy/2016/12/05/get-started-with-powershell-development-in-visual-studio-code/&quot;&gt;Here is why and how&lt;/a&gt;). At the same time I started using &lt;a href=&quot;https://github.com/pester/Pester&quot;&gt;Pester&lt;/a&gt; to do TDD with PowerShell too. It works very well out of the box, at least at the beginning of a project. As you are writing your Pester tests file to cover the function you have just written you can simply hit F5 to execute all of the tests in that file. Easy.&lt;/p&gt;

&lt;p&gt;It’s just that it is backwards. The tests should have already been written, and as you are writing your function that will satisfy the tests you try to press F5 and that function gets executed, not the tests. Even more so, if the function is part a module it gets executed out of context. Nothing works.&lt;/p&gt;

&lt;p&gt;Trying to solve my problem I found a very good writeup on &lt;a href=&quot;https://blogs.technet.microsoft.com/heyscriptingguy/2017/02/06/debugging-powershell-script-in-visual-studio-code-part-1/&quot;&gt;Debugging PowerShell in VS Code&lt;/a&gt; but it did not answer my question of how to do test driven development with pester and Visual Studio Code.&lt;/p&gt;

&lt;p&gt;Eventually to solve my problem I have created &lt;a href=&quot;https://gist.github.com/michalporeba/5103a2fae1b1dfa3c1f09b9f4d225420&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;workinprogress.ps1&lt;/code&gt;&lt;/a&gt; script which I typically keep just outside of the repository and define the following VS Code configuration in my &lt;code class=&quot;highlighter-rouge&quot;&gt;launch.json&lt;/code&gt; file.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;version&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;0.2.0&quot;&lt;/span&gt;,
    &lt;span class=&quot;s2&quot;&gt;&quot;configurations&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;

        &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;PowerShell&quot;&lt;/span&gt;,
            &lt;span class=&quot;s2&quot;&gt;&quot;request&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;launch&quot;&lt;/span&gt;,
            &lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;Test workinprogress&quot;&lt;/span&gt;,
            &lt;span class=&quot;s2&quot;&gt;&quot;script&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;workspaceFolder&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/../workinprogress.ps1&quot;&lt;/span&gt;,
            &lt;span class=&quot;s2&quot;&gt;&quot;args&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;workspaceFolder&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;workspaceFolder&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/tests&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;VS Code will pass the current workspace, the path to the unit tests (&lt;code class=&quot;highlighter-rouge&quot;&gt;${workspaceFolder}/tests&lt;/code&gt; in the example), and the open file with the current line number. Based on that information the following will happen when you hit F5&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;if there is a module (.psm1) file in the workspace, the module will be reloaded&lt;/li&gt;
  &lt;li&gt;if the open file name ends with &lt;code class=&quot;highlighter-rouge&quot;&gt;.Tests.ps1&lt;/code&gt; the script will attempt to find the closest pester &lt;code class=&quot;highlighter-rouge&quot;&gt;-Tag&lt;/code&gt; and execute only that tag from the current file. Failing that the whole pester file will be executed&lt;/li&gt;
  &lt;li&gt;if it is not a pester file but the matching (by name) test file exists next to the open file, it will be executed.&lt;/li&gt;
  &lt;li&gt;if there is a matching (by name) test file somewhere inside the tests folder (&lt;code class=&quot;highlighter-rouge&quot;&gt;${workspaceFoder}/tests&lt;/code&gt; in this example) it will be executed.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A matching test file has the same name as the original file but ends with &lt;code class=&quot;highlighter-rouge&quot;&gt;.Tests.ps1&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;.ps1&lt;/code&gt;. So for a command file &lt;code class=&quot;highlighter-rouge&quot;&gt;Get-MyValue.ps1&lt;/code&gt; the matching tests file is &lt;code class=&quot;highlighter-rouge&quot;&gt;Get-MyValue.Tests.ps1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;workinprogress.ps1&lt;/code&gt; file is available on github &lt;a href=&quot;https://gist.github.com/michalporeba/5103a2fae1b1dfa3c1f09b9f4d225420&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">I have recently switched to Visual Studio Code for writing PowerShell scripts. (Here is why and how). At the same time I started using Pester to do TDD with PowerShell too. It works very well out of the box, at least at the beginning of a project. As you are writing your Pester tests file to cover the function you have just written you can simply hit F5 to execute all of the tests in that file. Easy.</summary></entry></feed>