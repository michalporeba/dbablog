<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.3">Jekyll</generator><link href="http://dbain.wales/feed.xml" rel="self" type="application/atom+xml" /><link href="http://dbain.wales/" rel="alternate" type="text/html" /><updated>2018-04-01T13:22:32+01:00</updated><id>http://dbain.wales/</id><title type="html">DBA in Wales</title><subtitle>I am a DBA in Wales who likes to code with C# and PowerShell,  play music with Ruby, speak obscure languages  and discover places most people don't ever go to.</subtitle><entry><title type="html">TDD with VS Code and Pester</title><link href="http://dbain.wales/about/tdd-with-vscode-and-pester" rel="alternate" type="text/html" title="TDD with VS Code and Pester" /><published>2018-03-31T16:00:00+01:00</published><updated>2018-03-31T16:00:00+01:00</updated><id>http://dbain.wales/about/tdd-with-vscode-and-pester</id><content type="html" xml:base="http://dbain.wales/about/tdd-with-vscode-and-pester">&lt;p&gt;I have recently switched to &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;Visual Studio Code&lt;/a&gt; for writing &lt;a href=&quot;https://docs.microsoft.com/en-us/powershell/&quot;&gt;PowerShell&lt;/a&gt; scripts. (&lt;a href=&quot;https://blogs.technet.microsoft.com/heyscriptingguy/2016/12/05/get-started-with-powershell-development-in-visual-studio-code/&quot;&gt;Here is why and how&lt;/a&gt;). At the same time I started using &lt;a href=&quot;https://github.com/pester/Pester&quot;&gt;Pester&lt;/a&gt; to do TDD with PowerShell too. It works very well out of the box, at least at the beginning of a project. As you are writing your Pester tests file to cover the function you have just written you can simply hit F5 to execute all of the tests in that file. Easy.&lt;/p&gt;

&lt;p&gt;Itâ€™s just that it is backwards. The tests should have already been written, and as you are writing your function that will satisfy the tests you try to press F5 and that function gets executed, not the tests. Even more so, if the function is part a module it gets executed out of context. Nothing works.&lt;/p&gt;

&lt;p&gt;Trying to solve my problem I found a very good writeup on &lt;a href=&quot;https://blogs.technet.microsoft.com/heyscriptingguy/2017/02/06/debugging-powershell-script-in-visual-studio-code-part-1/&quot;&gt;Debugging PowerShell in VS Code&lt;/a&gt; but it did not answer my question of how to do test driven development with pester and Visual Studio Code.&lt;/p&gt;

&lt;p&gt;Eventually to solve my problem I have created &lt;a href=&quot;https://gist.github.com/michalporeba/5103a2fae1b1dfa3c1f09b9f4d225420&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;workinprogress.ps1&lt;/code&gt;&lt;/a&gt; script which I typically keep just outside of the repository and define the following VS Code configuration in my &lt;code class=&quot;highlighter-rouge&quot;&gt;launch.json&lt;/code&gt; file.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;version&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;0.2.0&quot;&lt;/span&gt;,
    &lt;span class=&quot;s2&quot;&gt;&quot;configurations&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;

        &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;PowerShell&quot;&lt;/span&gt;,
            &lt;span class=&quot;s2&quot;&gt;&quot;request&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;launch&quot;&lt;/span&gt;,
            &lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;Test workinprogress&quot;&lt;/span&gt;,
            &lt;span class=&quot;s2&quot;&gt;&quot;script&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;workspaceFolder&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/../workinprogress.ps1&quot;&lt;/span&gt;,
            &lt;span class=&quot;s2&quot;&gt;&quot;args&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;workspaceFolder&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;workspaceFolder&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/tests&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;VS Code will pass the current workspace, the path to the unit tests (&lt;code class=&quot;highlighter-rouge&quot;&gt;${workspaceFolder}/tests&lt;/code&gt; in the example), and the open file with the current line number. Based on that information the following will happen when you hit F5&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;if there is a module (.psm1) file in the workspace, the module will be reloaded&lt;/li&gt;
  &lt;li&gt;if the open file name ends with &lt;code class=&quot;highlighter-rouge&quot;&gt;.Tests.ps1&lt;/code&gt; the script will attempt to find the closest pester &lt;code class=&quot;highlighter-rouge&quot;&gt;-Tag&lt;/code&gt; and execute only that tag from the current file. Failing that the whole pester file will be executed&lt;/li&gt;
  &lt;li&gt;if it is not a pester file but the matching (by name) test file exists next to the open file, it will be executed.&lt;/li&gt;
  &lt;li&gt;if there is a matching (by name) test file somewhere inside the tests folder (&lt;code class=&quot;highlighter-rouge&quot;&gt;${workspaceFoder}/tests&lt;/code&gt; in this example) it will be executed.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A matching test file has the same name as the original file but ends with &lt;code class=&quot;highlighter-rouge&quot;&gt;.Tests.ps1&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;.ps1&lt;/code&gt;. So for a command file &lt;code class=&quot;highlighter-rouge&quot;&gt;Get-MyValue.ps1&lt;/code&gt; the matching tests file is &lt;code class=&quot;highlighter-rouge&quot;&gt;Get-MyValue.Tests.ps1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;workinprogress.ps1&lt;/code&gt; file is available on github &lt;a href=&quot;https://gist.github.com/michalporeba/5103a2fae1b1dfa3c1f09b9f4d225420&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">I have recently switched to Visual Studio Code for writing PowerShell scripts. (Here is why and how). At the same time I started using Pester to do TDD with PowerShell too. It works very well out of the box, at least at the beginning of a project. As you are writing your Pester tests file to cover the function you have just written you can simply hit F5 to execute all of the tests in that file. Easy.</summary></entry></feed>